// components/LoadingScreen.js
import React, { useState, useEffect, useRef } from 'react';
import styles from '../styles/LoadingScreen.module.css';

const loadingTextSequence = [
Â  "[AMA OS v3.4.7 - Vision Boot Sequence Initiated]",
Â  "> console.log(\"Preparing neural environment...\");",
Â  "[INFO] Silencing external stimuli...",
Â  "[INFO] Redirecting ocular input to internal stream...",
Â  "[INFO] Auditory dampening: 70% â€” faint external sound permitted for grounding.",
Â  "> console.log(\"Loading vision construct...\");",
Â  "[INFO] Parsing vision package: VSN-Î”47-B (\"The Forgotten Tower\")",
Â  "[INFO] Architecture: Fractal geometry with impossible symmetry",
Â  "[INFO] Emotional tone: Nostalgia / Dread hybrid",
Â  "[INFO] Temperature override: Cool mist sensation â€” ON",
Â  "> console.log(\"Injecting vision markers...\");",
Â  "[OK] Marker #1: Distant whisper, language unknown",
Â  "[OK] Marker #2: Crimson light source, impossible to approach",
Â  "[OK] Marker #3: A figure you *almost* recognize, just out of view",
Â  "> console.log(\"Reality anchors set. Fail-safe active.\");",
Â  "[ANCHORS]",
Â  "ðŸ”¹ Tactile recall: pressure on left wrist = emergency reset",
Â  "ðŸ”¹ Memory loop protection: enabled",
Â  "ðŸ”¹ Oxygen monitoring: linked",
Â  "> console.log(\"Final lock: AMA OS ceding control to vision stream...\");",
Â  "[COUNTDOWN]",
Â  "3...",
Â  "2...",
Â  "1...",
Â  "> console.log(\"Vision Boot Complete.\")",
Â  "> console.log(\"AMA OS: You are now *elsewhere.*\")",
Â  "â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ",
Â  "â€” Fractal structures unfold in impossible skies â€”",
Â  "â€” Footsteps behind you, but no shadow â€”",
Â  "â€” A door with no handle. You know you must open it â€”",
Â  "â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ",
];


const LoadingScreen = () => {
    Â  const [loadingProgress, setLoadingProgress] = useState(0);
    Â  const [showLoading, setShowLoading] = useState(true);
    Â  const [fadeOut, setFadeOut] = useState(false);
    Â  const [animatedText, setAnimatedText] = useState([]);
    Â  const [textIndex, setTextIndex] = useState(0);
    Â  const [progressPercent, setProgressPercent] = useState(0);
    Â  const consoleTextRef = useRef(null);
    const logoAnimationRef = useRef(null);
    const restElementsRef = useRef(null);

    Â  useEffect(() => {
    Â  Â  let animationInterval;
    Â  Â  let progressInterval;
    Â  Â  const fakeLoadingDuration = 9000;
    Â  Â  const fadeOutDuration = 500;
    Â  Â  const incrementInterval = fakeLoadingDuration / 100;
    
    Â  Â  progressInterval = setInterval(() => {
    Â  Â  Â  setLoadingProgress((prevProgress) => {
    Â  Â  Â  Â  if (prevProgress < 100) {
    Â  Â  Â  Â  Â  return prevProgress + 1;
    Â  Â  Â  Â  }
    Â  Â  Â  Â  return prevProgress;
    Â  Â  Â  });
    Â  Â  Â  setProgressPercent((prevPercent) => {
    Â  Â  Â  Â  if (prevPercent < 100) {
    Â  Â  Â  Â  Â  return Math.floor(prevPercent + 1);
    Â  Â  Â  Â  }
    Â  Â  Â  Â  return prevPercent;
    Â  Â  Â  });
    Â  Â  }, incrementInterval);
    
    Â  Â  const finishLoading = () => {
    Â  Â  Â  clearInterval(progressInterval);
    Â  Â  Â  setLoadingProgress(100);
    Â  Â  Â  setFadeOut(true);
    Â  Â  Â  setTimeout(() => setShowLoading(false), fadeOutDuration);
    Â  Â  };
    
    Â  Â  const simulatePageLoad = setTimeout(() => {
    Â  Â  Â  finishLoading();
    Â  Â  }, fakeLoadingDuration);
    
    Â  Â  return () => {
    Â  Â  Â  clearInterval(animationInterval);
    Â  Â  Â  clearInterval(progressInterval);
    Â  Â  Â  clearTimeout(simulatePageLoad);
    Â  Â  };
    Â  }, []);

    useEffect(() => {
        Â  Â  const logoFadeInTimer = setTimeout(() => {
        Â  Â  Â  if (logoAnimationRef.current) {
        Â  Â  Â  Â  logoAnimationRef.current.classList.add(styles.fadeIn);
        Â  Â  Â  }
        Â  Â  }, 500);
        
        Â  Â  const restFadeInTimer = setTimeout(() => {
        Â  Â  Â  if (restElementsRef.current) {
        Â  Â  Â  Â  restElementsRef.current.classList.add(styles.restFadeIn);
        Â  Â  Â  }
        Â  Â  }, 500); // Aumentamos el delay a 3 segundos
        
        Â  Â  return () => {
        Â  Â  Â  clearTimeout(logoFadeInTimer);
        Â  Â  Â  clearTimeout(restFadeInTimer);
        Â  Â  };
        Â  }, []);

    Â  useEffect(() => {
    Â  Â  if (textIndex < loadingTextSequence.length) {
    Â  Â  Â  const timer = setTimeout(() => {
    Â  Â  Â  Â  setAnimatedText((prevText) => [...prevText, loadingTextSequence[textIndex]]);
    Â  Â  Â  Â  setTextIndex(textIndex + 1);
    Â  Â  Â  Â  if (consoleTextRef.current) {
    Â  Â  Â  Â  Â  consoleTextRef.current.scrollTop = consoleTextRef.current.scrollHeight;
    Â  Â  Â  Â  }
    Â  Â  Â  }, 300);
    Â  Â  Â  return () => clearTimeout(timer);
    Â  Â  }
    Â  }, [textIndex]);
    
    Â  if (!showLoading) {
        Â  Â  return null;
        Â  }
        
        Â  return (
            Â  Â  <div className={`${styles.loadingContainer} ${fadeOut ? styles.fadeOut : ''}`}>
            Â  Â  Â  <div className={styles.logoAnimation} ref={logoAnimationRef}> {/* AÃ±ade la referencia al logo */}
            Â  Â  Â  Â  <img src="/LOGO-BLACK.png" alt="Logo" />
            Â  Â  Â  </div>
            Â  Â  Â  <div ref={restElementsRef} className={styles.restElements}> {/* Contenedor para el resto */}
            Â  Â  Â  Â  <div className={styles.progressBar}>
            Â  Â  Â  Â  Â  <div className={styles.progress} key={loadingProgress} style={{ width: `${loadingProgress}%` }}></div>
            Â  Â  Â  Â  </div>
            Â  Â  Â  Â  <p className={styles.loadingText}>Cargando... {progressPercent}%</p>
            Â  Â  Â  Â  <div className={styles.consoleText} ref={consoleTextRef}>
            Â  Â  Â  Â  Â  {animatedText.map((line, index) => (
            Â  Â  Â  Â  Â  Â  <p key={index}>{line}</p>
            Â  Â  Â  Â  Â  Â  ))}
            Â  Â  Â  Â  </div>
            Â  Â  Â  </div>
            Â  Â  </div>
            Â  );
            };
        
        export default LoadingScreen;